
public class SquareOfDigits {
    public int getMax(String[] data) {
        int distance = 0;
        int squrt = 1;

        for (int i = 0; i < data.length; i++) {
            for (int j = 0; j < data[i].length(); j++) {
                for (int j2 = j + 1; j2 < data[i].length(); j2++) {
                    if (data[i].charAt(j) == data[i].charAt(j2)) {
                        distance = j2 - j;
                        if (i + distance < data.length && data[i + distance].charAt(j) == data[i + distance].charAt(j2)
                                && data[i].charAt(j) == data[i + distance].charAt(j)) {
                            squrt = Math.max(squrt, (distance + 1) * (distance + 1));
                        }
                    }
                }
            }
        }
        return squrt;
    }


    public static void main(String[] args) {
        System.out.println(new SquareOfDigits().getMax(
                new String[]{
                "91928015882967780403600649522250338308189031845003", "73862842852620682209955047510069633978905085455807",
                "16049714109549750811310422054735579692793373443189", "78707894183584704812553859001694058900029062962552",
                "02512303923932930087052400659566666987204697913046", "94917300044670067760332751140500050530025804282500",
                "01555427387009002620907054794524672459555010800490", "19745598494314030239977229669685699500858758062301",
                "95403133988410004587859030829066174539730240563773", "24591017787480701787396906547522968905811766624745",
                "63416698301657431661645791104503530300625431442915", "06320341264074434149273064835874748021068200440739",
                "49785305203284905241459390780217699772970340107068", "16945117053130217728743694990002876131140795300068",
                "62052597264694062003641830696410760473200578276424", "08699933409028606061026103207155223058340257051121",
                "01748637540096416068409833450016410704697815019000", "66379438095812307677032690142230857456217010201084",
                "63328697574020556873770424165108601818263054253120", "63436159542037487094988065607702051603439751389980",
                "80496950371380418132327200832505105669742007790101", "79220874260898567429197607252869723092053067435423",
                "69409797123349896218106053082697860005350973955866", "06306801283329078640030617588451109199506205406718",
                "98918735760359021890445007361005090158578013306000", "40674834050979266875441809127047714685139674703052",
                "51475266768425767346191189021446837944134889956234", "08741429799075404884003252185481601150750588067032",
                "98036190507606186184718925926279088998904559855340", "28880504407025500346305919620689979309548035401169",
                "79508421024054840878002057532207391637020657320046", "40400083808705374891483091639888200099727225860797",
                "00800627293844918290209572898274264587350018031053", "08879010623400028610792086245741187825091902105153",
                "45360092920348231810061780503113120638542300920406", "87249960279995990293133440134134734809055814439230",
                "91050602416386593291809523264193510123605200235896", "90640427331312193635086092273292291418479665710070",
                "96546191800666827314409640631697702502462886215839", "05090812308937930771277590635716667380897660764525",
                "19545804411505214428571922870063762301123586072040", "23545054125579400098006287301995680045410094030600",
                "60421146582404288271865102554854095912270135028409", "46766270966619092065015186655481616806920622857120",
                "06001747437956962096282744899728008070500010295669", "72277285226008160053030267300983934043491857859604",
                "07073652361191437268998010926359002705310920302715", "49304473864475956888051489988001360630570479020494",
                "73797300060400371445501080992925879208380118623592", "62715490632850106697260537575038880626940624320993"}
        ));
    }
}